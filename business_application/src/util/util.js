import dayjs from 'dayjs'
import { history } from 'umi';
import axios from 'axios';
import { CHUNK_SIZE } from '../service/constant';
import { message } from 'antd';
import { BL_STATE } from "./constant";
import DictoryIcon from '../../public/assets/filePng.png'
import ImgIcon from '../../public/assets/imgIcon.svg'
import PptIcon from '../../public/assets/ppt.svg'
import XlsxIcon from '../../public/assets/xlsx.svg'
import PdfIcon from '../../public/assets/pdfIcon.svg'
import DoctIcon from '../../public/assets/doct.svg'
import Mp3Icon from '../../public/assets/mp3.svg'
import Mp4Icon from '../../public/assets/mp4.svg'
import TextIcon from '../../public/assets/txt.svg'
import CommonIcon from '../../public/assets/common.svg'

/**
 * [formatDate 时间戳格式化为指定日期格式]
 * @param  {[String]} timestamp [时间戳字符串]
 * @param  {[String]} format [转换格式，全格式"YYYY MM DD HH:mm:ss" 缺省则默认"MM-DD HH:mm"]
 * @return {[String]}           [日期格式]
 */
export function dataFormat(timestamp, format) {
  if (!timestamp || timestamp === '0') {
    return '';
  }
  var day = dayjs.unix(Number(timestamp));
  var thisFormat = format == undefined ? 'YYYY-MM-DD' : format;

  return day.format(thisFormat).toString();
}

/**
 * 显示汉板年月日时分秒**/

export const timeStamp=(time)=> {
  const date = new Date(time)
  const Y = date.getFullYear() + '年'
  const M = (date.getMonth() + 1 < 10 ? '0' + (date.getMonth() + 1) : date.getMonth() + 1) + '月'
  const  D = (date.getDate() < 10 ? '0' + date.getDate() : date.getDate()) + '日'+' '
  const h = (date.getHours() < 10 ? '0' + date.getHours() : date.getHours()) + ':'
  const m = (date.getMinutes() < 10 ? '0' + date.getMinutes() : date.getMinutes()) + ':'
  const s = (date.getSeconds() < 10 ? '0' + date.getSeconds() : date.getSeconds())
  return Y + M + D + h + m + s
}

/**
 * 【设置cookie】
 */
export function setCookie(objName, objValue, objHours = 0) {
  var str = objName + '=' + objValue;
  if (objHours > 0) {
    //为0时不设定过期时间，浏览器关闭时cookie自动消失
    var date = new Date();
    var ms = objHours * 3600 * 1000;
    date.setTime(date.getTime() + ms);
    str += '; expires=' + date.toGMTString();
  }
  document.cookie = str;
}
/**
 * 【读取cookie】
 */
export function getCookie(objName) {
  //获取指定名称的cookie的值
  var arrStr = document.cookie.split('; ');
  for (var i = 0; i < arrStr.length; i++) {
    var temp = arrStr[i].split('=');
    if (temp[0] == objName) return temp[1];
  }
  return '';
}

export function getMenuName(menus, bizSolId) {
  if (menus.length !== 0) {
    for (let i = 0; i < menus.length; i++) {
      const element = menus[i];
      if (element.bizSolId == bizSolId) {
        console.log('element.name:', element.name);
        return element.name;
      } else {
        if (element.children.length) {
          getMenuName(element.children, bizSolId);
        }
      }
    }
  }
}

export function getButton(menus, buttonCode) {
  if (menus.length != 0) {
    for (let index = 0; index < menus.length; index++) {
      const element = menus[index];
      let buttons = [];
      let path = `/${history.location.pathname.split('/')[1]}`;
      if (path == element.path) {
        buttons = element;
      } else if (element.routes && element.routes.length != 0) {
        const nextButtons = _.find(element.routes, function (o) {
          return o.routes.length != 0;
        });
        if (
          nextButtons &&
          (path == '/buttonLibrary' || path == '/buttonSolution')
        ) {
          //按钮库需循环下一层
          return getButton([nextButtons], buttonCode);
        }
        buttons = _.find(element.routes, { path: path }); //找到当前路径所在obj
      }
      if (buttonCode) {
        if (buttons && buttons.length != 0) {
          const button = _.find(buttons.buttonList, { buttonCode: buttonCode }); //找到当前按钮标识
          if (button) {
            return true;
          } else {
            return false;
          }
        } else {
          continue;
        }
      } else {
        if (buttons) {
          //数据规则code
          return buttons.dataRuleCode ? buttons.dataRuleCode : '';
        } else {
          continue;
        }
      }
    }
  }
}
const imgArr = ['jpeg','jpg','png','git']
const pptArr  = ['ppt','pptx','pot','ppsx']  
const excelArr = ['xls','xlsx','xlsm','xltm']
const doctArr = ['docx','doc']
const mp3Arr = ['mp3','wav','wma','aac']
const mp4Arr = ['mp4','avi','mpeg','mov']

export  const getDiskFileType = (record)=>{
  console.log("record111111",record)
  if(record.cloudDiskType =='文件夹'){
    return <img src={DictoryIcon} style={{marginRight:16}}/>
  }else if(imgArr.includes(record.cloudDiskType)){
    return <img src={ImgIcon} style={{marginRight:16}}/>
  }else if(pptArr.includes(record.cloudDiskType)){
    return <img src={PptIcon} style={{marginRight:16}}/>
  }else if(record.cloudDiskType == 'pdf'){
    return <img src={PdfIcon} style={{marginRight:16}}/>
  }else if(excelArr.includes(record.cloudDiskType)){
    return <img src={XlsxIcon} style={{marginRight:16}}/>
  }else if(doctArr.includes(record.cloudDiskType)){
    return <img src={DoctIcon} style={{marginRight:16}}/>
  }else if(mp3Arr.includes(record.cloudDiskType)){
    return <img src={Mp3Icon}  style={{marginRight:16}}/>
  }else if(mp4Arr.includes(record.cloudDiskType)){
    return <img src={Mp4Icon} style={{marginRight:16}}/>
  }else if(record.cloudDiskType == 'txt'){
    return <img src={TextIcon} style={{marginRight:16}}/>
  }else{
    return <img src={CommonIcon} style={{marginRight:16}}/>
  }
}
export const axiosGetUrl = (url)=>{
  return {
    get: axios.get(url) 
  }
}

export const getAxiosData = (src)=>{
  return new Promise((resolve,reject)=>{
    axios({ url: src, method: 'get', responseType: 'blob' }).then(res=>{
      resolve(res.data)
    })
  })
}
export const downloadCreateA = (data,filename)=>{
  const blobUrl = window.URL.createObjectURL(new Blob([data]))
  // 这里的文件名根据实际情况从响应头或者url里获取
  const a = document.createElement('a')
  a.href = blobUrl
  a.download = filename
  a.click()
  window.URL.revokeObjectURL(blobUrl)
}

var HanZi_PinYin = {
  // 汉字拼音首字母列表 本列表包含了20902个汉字,用于配合 ToChineseSpell
  //函数使用,本表收录的字符的Unicode编码范围为19968至40869, XDesigner 整理
  strChineseFirstPY:
    '',
  //此处收录了375个多音字,数据来自于http://www.51window.net/page/pinyin
  oMultiDiff: {
    19969: 'DZ',
    19975: 'WM',
    19988: 'QJ',
    20048: 'YL',
    20056: 'SC',
    20060: 'NM',
    20094: 'QG',
    20127: 'QJ',
    20167: 'QC',
    20193: 'YG',
    20250: 'KH',
    20256: 'ZC',
    20282: 'SC',
    20285: 'QJG',
    20291: 'TD',
    20314: 'YD',
    20340: 'NE',
    20375: 'TD',
    20389: 'YJ',
    20391: 'CZ',
    20415: 'PB',
    20446: 'YS',
    20447: 'SQ',
    20504: 'TC',
    20608: 'KG',
    20854: 'QJ',
    20857: 'ZC',
    20911: 'PF',
    20504: 'TC',
    20608: 'KG',
    20854: 'QJ',
    20857: 'ZC',
    20911: 'PF',
    20985: 'AW',
    21032: 'PB',
    21048: 'XQ',
    21049: 'SC',
    21089: 'YS',
    21119: 'JC',
    21242: 'SB',
    21273: 'SC',
    21305: 'YP',
    21306: 'QO',
    21330: 'ZC',
    21333: 'SDC',
    21345: 'QK',
    21378: 'CA',
    21397: 'SC',
    21414: 'XS',
    21442: 'SC',
    21477: 'JG',
    21480: 'TD',
    21484: 'ZS',
    21494: 'YX',
    21505: 'YX',
    21512: 'HG',
    21523: 'XH',
    21537: 'PB',
    21542: 'PF',
    21549: 'KH',
    21571: 'E',
    21574: 'DA',
    21588: 'TD',
    21589: 'O',
    21618: 'ZC',
    21621: 'KHA',
    21632: 'ZJ',
    21654: 'KG',
    21679: 'LKG',
    21683: 'KH',
    21710: 'A',
    21719: 'YH',
    21734: 'WOE',
    21769: 'A',
    21780: 'WN',
    21804: 'XH',
    21834: 'A',
    21899: 'ZD',
    21903: 'RN',
    21908: 'WO',
    21939: 'ZC',
    21956: 'SA',
    21964: 'YA',
    21970: 'TD',
    22003: 'A',
    22031: 'JG',
    22040: 'XS',
    22060: 'ZC',
    22066: 'ZC',
    22079: 'MH',
    22129: 'XJ',
    22179: 'XA',
    22237: 'NJ',
    22244: 'TD',
    22280: 'JQ',
    22300: 'YH',
    22313: 'XW',
    22331: 'YQ',
    22343: 'YJ',
    22351: 'PH',
    22395: 'DC',
    22412: 'TD',
    22484: 'PB',
    22500: 'PB',
    22534: 'ZD',
    22549: 'DH',
    22561: 'PB',
    22612: 'TD',
    22771: 'KQ',
    22831: 'HB',
    22841: 'JG',
    22855: 'QJ',
    22865: 'XQ',
    23013: 'ML',
    23081: 'WM',
    23487: 'SX',
    23558: 'QJ',
    23561: 'YW',
    23586: 'YW',
    23614: 'YW',
    23615: 'SN',
    23631: 'PB',
    23646: 'ZS',
    23663: 'ZT',
    23673: 'YG',
    23762: 'TD',
    23769: 'ZS',
    23780: 'QJ',
    23884: 'QK',
    24055: 'XH',
    24113: 'DC',
    24162: 'ZC',
    24191: 'GA',
    24273: 'QJ',
    24324: 'NL',
    24377: 'TD',
    24378: 'QJ',
    24439: 'PF',
    24554: 'ZS',
    24683: 'TD',
    24694: 'WE',
    24733: 'LK',
    24925: 'TN',
    25094: 'ZG',
    25100: 'XQ',
    25103: 'XH',
    25153: 'PB',
    25170: 'PB',
    25179: 'KG',
    25203: 'PB',
    25240: 'ZS',
    25282: 'FB',
    25303: 'NA',
    25324: 'KG',
    25341: 'ZY',
    25373: 'WZ',
    25375: 'XJ',
    25384: 'A',
    25457: 'A',
    25528: 'SD',
    25530: 'SC',
    25552: 'TD',
    25774: 'ZC',
    25874: 'ZC',
    26044: 'YW',
    26080: 'WM',
    26292: 'PB',
    26333: 'PB',
    26355: 'ZY',
    26366: 'CZ',
    26397: 'ZC',
    26399: 'QJ',
    26415: 'ZS',
    26451: 'SB',
    26526: 'ZC',
    26552: 'JG',
    26561: 'TD',
    26588: 'JG',
    26597: 'CZ',
    26629: 'ZS',
    26638: 'YL',
    26646: 'XQ',
    26653: 'KG',
    26657: 'XJ',
    26727: 'HG',
    26894: 'ZC',
    26937: 'ZS',
    26946: 'ZC',
    26999: 'KJ',
    27099: 'KJ',
    27449: 'YQ',
    27481: 'XS',
    27542: 'ZS',
    27663: 'ZS',
    27748: 'TS',
    27784: 'SC',
    27788: 'ZD',
    27795: 'TD',
    27812: 'O',
    27850: 'PB',
    27852: 'MB',
    27895: 'SL',
    27898: 'PL',
    27973: 'QJ',
    27981: 'KH',
    27986: 'HX',
    27994: 'XJ',
    28044: 'YC',
    28065: 'WG',
    28177: 'SM',
    28267: 'QJ',
    28291: 'KH',
    28337: 'ZQ',
    28463: 'TL',
    28548: 'DC',
    28601: 'TD',
    28689: 'PB',
    28805: 'JG',
    28820: 'QG',
    28846: 'PB',
    28952: 'TD',
    28975: 'ZC',
    29100: 'A',
    29325: 'QJ',
    29575: 'SL',
    29602: 'FB',
    30010: 'TD',
    30044: 'CX',
    30058: 'PF',
    30091: 'YSP',
    30111: 'YN',
    30229: 'XJ',
    30427: 'SC',
    30465: 'SX',
    30631: 'YQ',
    30655: 'QJ',
    30684: 'QJG',
    30707: 'SD',
    30729: 'XH',
    30796: 'LG',
    30917: 'PB',
    31074: 'NM',
    31085: 'JZ',
    31109: 'SC',
    31181: 'ZC',
    31192: 'MLB',
    31293: 'JQ',
    31400: 'YX',
    31584: 'YJ',
    31896: 'ZN',
    31909: 'ZY',
    31995: 'XJ',
    32321: 'PF',
    32327: 'ZY',
    32418: 'HG',
    32420: 'XQ',
    32421: 'HG',
    32438: 'LG',
    32473: 'GJ',
    32488: 'TD',
    32521: 'QJ',
    32527: 'PB',
    32562: 'ZSQ',
    32564: 'JZ',
    32735: 'ZD',
    32793: 'PB',
    33071: 'PF',
    33098: 'XL',
    33100: 'YA',
    33152: 'PB',
    33261: 'CX',
    33324: 'BP',
    33333: 'TD',
    33406: 'YA',
    33426: 'WM',
    33432: 'PB',
    33445: 'JG',
    33486: 'ZN',
    33493: 'TS',
    33507: 'QJ',
    33540: 'QJ',
    33544: 'ZC',
    33564: 'XQ',
    33617: 'YT',
    33632: 'QJ',
    33636: 'XH',
    33637: 'YX',
    33694: 'WG',
    33705: 'PF',
    33728: 'YW',
    33882: 'SR',
    34067: 'WM',
    34074: 'YW',
    34121: 'QJ',
    34255: 'ZC',
    34259: 'XL',
    34425: 'JH',
    34430: 'XH',
    34485: 'KH',
    34503: 'YS',
    34532: 'HG',
    34552: 'XS',
    34558: 'YE',
    34593: 'ZL',
    34660: 'YQ',
    34892: 'XH',
    34928: 'SC',
    34999: 'QJ',
    35048: 'PB',
    35059: 'SC',
    35098: 'ZC',
    35203: 'TQ',
    35265: 'JX',
    35299: 'JX',
    35782: 'SZ',
    35828: 'YS',
    35830: 'E',
    35843: 'TD',
    35895: 'YG',
    35977: 'MH',
    36158: 'JG',
    36228: 'QJ',
    36426: 'XQ',
    36466: 'DC',
    36710: 'JC',
    36711: 'ZYG',
    36767: 'PB',
    36866: 'SK',
    36951: 'YW',
    37034: 'YX',
    37063: 'XH',
    37218: 'ZC',
    37325: 'ZC',
    38063: 'PB',
    38079: 'TD',
    38085: 'QY',
    38107: 'DC',
    38116: 'TD',
    38123: 'YD',
    38224: 'HG',
    38241: 'XTC',
    38271: 'ZC',
    38415: 'YE',
    38426: 'KH',
    38461: 'YD',
    38463: 'AE',
    38466: 'PB',
    38477: 'XJ',
    38518: 'YT',
    38551: 'WK',
    38585: 'ZC',
    38704: 'XS',
    38739: 'LJ',
    38761: 'GJ',
    38808: 'SQ',
    39048: 'JG',
    39049: 'XJ',
    39052: 'HG',
    39076: 'CZ',
    39271: 'XT',
    39534: 'TD',
    39552: 'TD',
    39584: 'PB',
    39647: 'SB',
    39730: 'LG',
    39748: 'TPB',
    40109: 'ZQ',
    40479: 'ND',
    40516: 'HG',
    40536: 'HG',
    40583: 'QJ',
    40765: 'YQ',
    40784: 'QJ',
    40840: 'YK',
    40863: 'QJG',
  },

  //参数,中文字符串
  //返回值:拼音首字母串数组
  get: function (str) {
    if (typeof str != 'string') {
      throw new Error(-1, '函数makePy需要字符串类型参数!');
    }
    var arrResult = new Array(); //保存中间结果的数组
    for (var i = 0, len = str.length; i < len; i++) {
      //获得unicode码
      var ch = str.charAt(i);
      //检查该unicode码是否在处理范围之内,在则返回该码对映汉字的拼音首字母,不在则调用其它函数处理
      arrResult.push(HanZi_PinYin.check(ch));
    }
    //处理arrResult,返回所有可能的拼音首字母串数组
    return HanZi_PinYin.init(arrResult).join('').toUpperCase();
  },
  //检查汉字是否在处理范围之内
  check: function (ch) {
    var uni = ch.charCodeAt(0);
    //如果不在汉字处理范围之内,返回原字符,也可以调用自己的处理函数
    if (uni > 40869 || uni < 19968) {
      return ch;
    }
    //检查是否是多音字,是按多音字处理,不是就直接在strChineseFirstPY字符串中找对应的首字母
    return HanZi_PinYin.oMultiDiff[uni]
      ? HanZi_PinYin.oMultiDiff[uni]
      : HanZi_PinYin.strChineseFirstPY.charAt(uni - 19968);
  },
  //获取拼音
  init: function (arr) {
    var arrRslt = [''];
    for (var i = 0, len = arr.length; i < len; i++) {
      var str = arr[i];
      var strlen = str.length;
      if (strlen == 1) {
        for (var k = 0; k < arrRslt.length; k++) {
          arrRslt[k] += str;
        }
      } else {
        var tmpArr = arrRslt.slice(0);
        arrRslt = [];
        for (k = 0; k < strlen; k++) {
          //复制一个相同的arrRslt
          var tmp = tmpArr.slice(0);
          //把当前字符str[k]添加到每个元素末尾
          for (var j = 0; j < tmp.length; j++) {
            tmp[j] += str.charAt(k);
          }
          //把复制并修改后的数组连接到arrRslt上
          arrRslt = arrRslt.concat(tmp);
        }
      }
    }
    return arrRslt;
  },
};

/**
 * 搜索框内容校验是否包含特殊字符
 * @param {*校验值} value
 */
export function checkWOrd(value) {
  let specialKey =
    "`@《》·~!%#$^&*=|{}':;'\\.<>/?~！#￥……&*|{}‘；：”“'。，、？‘'";
  for (let i = 0; i < value.length; i++) {
    if (specialKey.indexOf(value.substr(i, 1)) != -1) {
      return true;
    }
  }
  return false;
}
// 驼峰转换下划线
export function toLine(name) {
  return name.replace(/([A-Z])/g, '_$1').toLowerCase();
}

// 下划线转换驼峰
export function toCamelCase(str) {
  return str.toLowerCase().replace(/_(\w)/g, function (match, letter) {
    return letter.toUpperCase();
  });
}

/*金额格式化成千位
floatNum浮点数
*/
export function moneyFormateKilobit(floatNum) {
  //去掉小数
  let intNums = floatNum.split('.');
  let str = intNums[0].toString();
  let re = /(?=(?!(\b))(\d{3})+$)/g;
  str = str.replace(re, ',');
  return str + '.' + intNums[1];
}
//解析url,获取参数
export function getUrlParams(url) {
  let params = [];
  let query = url.split('?');
  if (query.length == 2) {
    let vars = query[1].split('&');
    for (let i = 0; i < vars.length; i++) {
      let pair = vars[i].split('=');
      params[pair[0]] = pair[1];
    }
  }
  if (query.length > 2) {
    let vars = query[1].split('&');
    for (let i = 0; i < vars.length; i++) {
      let pair = vars[i].split('=');
      if(pair[0]=='url'){
        params[pair[0]] = `${pair[1]}?${query[2]}`;
      }else{
        params[pair[0]] = pair[1];
      }
    }
  }
  return params;
}

export function number_format(number, decimals, dec_point, thousands_sep) {
  /*
   * 参数说明：
   * number：要格式化的数字
   * decimals：保留几位小数
   * dec_point：小数点符号
   * thousands_sep：千分位符号
   * */
  number = (number + '').replace(/[^0-9+Ee.]/g, '');
  var n = !isFinite(+number) ? 0 : +number,
    prec = !isFinite(+decimals) ? 0 : Math.abs(decimals),
    sep = typeof thousands_sep === 'undefined' ? ',' : thousands_sep,
    dec = typeof dec_point === 'undefined' ? '.' : dec_point,
    s = '',
    toFixedFix = function (n, prec) {
      var k = Math.pow(10, prec);
      return '' + Math.floor(n * k) / k;
    };
  s = (prec ? toFixedFix(n, prec) : '' + Math.floor(n)).split('.');
  var re = /(-?\d+)(\d{3})/;
  if (thousands_sep) {
    while (re.test(s[0])) {
      s[0] = s[0].replace(re, '$1' + sep + '$2');
    }
  }

  if ((s[1] || '').length < prec) {
    s[1] = s[1] || '';
    s[1] += new Array(prec - s[1].length + 1).join('0');
  }
  return s.join(dec);
}
//校验是否为手机号
export function checkPhones(val) {
  let number = /^[1][3,4,5,6,9,7,8][0-9]{9}$/;
  if (!number.test(val)) {
    return true;
  } else {
    return false;
  }
}
// 检验文字
export function checkNames(val) {
  let NameReg = /^[\u4E00-\u9FA5]{2,20}$/;
  if (!NameReg.test(val)) {
    return true;
  } else {
    return false;
  }
}
// 检验邮箱
export function checkEmails(val) {
  if (val.length > 40) {
    return true;
  }
  let EmailReg = /^[a-zA-Z0-9_-]+@([a-zA-Z0-9]+\.)+(com|cn|net|org)$/i;
  if (val && !EmailReg.test(val)) {
    return true;
  } else {
    return false;
  }
}
// 检验身份证号
export function checkCodes(id) {
  // 1 "验证通过!", 0 //校验不通过 // id为身份证号码
  var format = /^(([1][1-5])|([2][1-3])|([3][1-7])|([4][1-6])|([5][0-4])|([6][1-5])|([7][1])|([8][1-2]))\d{4}(([1][9]\d{2})|([2]\d{3}))(([0][1-9])|([1][0-2]))(([0][1-9])|([1-2][0-9])|([3][0-1]))\d{3}[0-9xX]$/;
  // 号码规则校验
  if (!format.test(id)) {
    return true;
  }
  // 区位码校验
  // 出生年月日校验  前正则限制起始年份为1900;
  var year = id.substr(6, 4); // 身份证年
  var month = id.substr(10, 2); // 身份证月
  var date = id.substr(12, 2); // 身份证日
  var time = Date.parse(month + '-' + date + '-' + year); // 身份证日期时间戳date
  var nowTime = Date.parse(new Date()); // 当前时间戳
  var dates = new Date(year, month, 0).getDate(); // 身份证当月天数
  if (time > nowTime || date > dates) {
    return true;
  }
  // 校验码判断
  var c = [7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2]; // 系数
  var b = ['1', '0', 'X', '9', '8', '7', '6', '5', '4', '3', '2']; // 校验码对照表
  var idArray = id.split('');
  var sum = 0;
  for (var k = 0; k < 17; k++) {
    sum += parseInt(idArray[k]) * parseInt(c[k]);
  }
  if (idArray[17].toUpperCase() !== b[sum % 11].toUpperCase()) {
    return true;
  }
  return false;
}

export function getFlatArr(arr) {
  return arr.reduce((a, item) => {
    let flatArr = [...a, item];
    if (item.children) {
      flatArr = [...flatArr, ...getFlatArr(item.children)];
    }
    return flatArr;
  }, []);
}

// fk 对最新的menus设置
export function setAllAppList(list, selectList, configList) {
  for (let i = 0; i < list.length; i++) {
    for (let j = 0; j < selectList.length; j++) {
      if (list[i].menuId == selectList[j].menuId) {
        list[i].selected = true;
      }
    }
    for (let k = 0; k < configList.length; k++) {
      if (list[i].menuId == configList[k].idx) {
        list[i].selected = true;
        list[i].lock = true;
      }
    }
    if (list[i].children) {
      setAllAppList(list[i].children, selectList, configList);
    }
  }
  return list;
}

export function dateAdd(interval, number, date) {
  switch (interval) {
    case 'y': {
      date.setFullYear(date.getFullYear() + number);
      return date;
    }
    case 'q': {
      date.setMonth(date.getMonth() + number * 3);
      return date;
    }
    case 'm': {
      date.setMonth(date.getMonth() + number);
      return date;
    }
    case 'w': {
      date.setDate(date.getDate() + number * 7);
      return date;
    }
    case 'd': {
      date.setDate(date.getDate() + number);
      return date;
    }
    case 'h': {
      date.setHours(date.getHours() + number);
      return date;
    }
    case 'm': {
      date.setMinutes(date.getMinutes() + number);
      return date;
    }
    case 's': {
      date.setSeconds(date.getSeconds() + number);
      return date;
    }
    default: {
      date.setDate(date.getDate() + number);
      return date;
    }
  }
}
/**
 * 中英文数字混合排序
 * @param {*} a
 * @param {*} b
 */
export function arrSortMinToMax(a, b) {
  let cReg = /^[\u4E00-\u9FCC\u3400-\u4DB5\uFA0E\uFA0F\uFA11\uFA13\uFA14\uFA1F\uFA21\uFA23\uFA24\uFA27-\uFA29]|[\ud840-\ud868][\udc00-\udfff]|\ud869[\udc00-\uded6\udf00-\udfff]|[\ud86a-\ud86c][\udc00-\udfff]|\ud86d[\udc00-\udf34\udf40-\udfff]|\ud86e[\udc00-\udc1d]/;
  if (!cReg.test(a) || !cReg.test(b)) {
    return a.localeCompare(b);
  } else {
    return a.localeCompare(b, 'zh');
  }
}
//提交表单时 处理金额 时间 基础数据码表的数据
// export const onFinshFormatData = (data,item,mvalues,dateValues,selectValues) =>{
//   mvalues&&mvalues.map((mv)=>{//金额字段需要处理掉逗号
//     if(mv.name==item&&data){
//       let reg = new RegExp(",","g");
//       var mvv = data.replace(reg,"");
//       const regexp=/(?:\.0*|(\.\d+?)0+)$/;//去掉多余的0
//       data= mvv.replace(regexp,'$1');
//       data = Number(data);
//     }
//   })
//   dateValues&&dateValues.map((datev)=>{//日期字
//     console.log('data',data,item,datev);
//     if(datev.name==item&&data){
//       if(data==null){
//         data= ''
//       }else{
//         console.log('data[item].valueOf()',data.valueOf());
//         data = parseInt(data.valueOf()/1000)
//       }
//     }
//   })
//   selectValues&&selectValues.map((sv)=>{
//     if(sv.name==item&&data){
//       if(data==null){//针对value是null的情况
//         data = ''
//       }else{
//         data= `${data.toString()}`
//       }
//     }
//   })
//   if(Number(data)==data){//用于文本的比较问题
//     data=Number(data);
//   }
//   return data
// }
//部门人员单位岗位去掉GTPU(只去掉第一个)
export function replaceGTPU(item) {
  let element = item;
  if (item.startsWith('G')) {
    //单位
    element = item.slice(1);
  } else if (item.startsWith('T')) {
    //部门
    element = item.slice(1);
  } else if (item.startsWith('P')) {
    //岗位
    element = item.slice(1);
  } else if (item.startsWith('U')) {
    //用户
    element = item.slice(1);
  }
  return element;
}

//获取文件长度
export function getContentLength(url) {
  return new Promise((resolve) => {
    const xhr = new XMLHttpRequest();
    xhr.open('HEAD', url);
    xhr.onload = function () {
      resolve(xhr.getResponseHeader('content-length') || 0);
    };
    xhr.send();
  });
}
//下载文件
export function partDownload(
  downName,
  url,
  start,
  end,
  contentLength,
  partLength = CHUNK_SIZE,
) {
  let fileData = [];
  let xhr = new XMLHttpRequest();
  let getDate = new Date().toUTCString();
  xhr.open('GET', url);
  xhr.responseType = 'arraybuffer';
  xhr.setRequestHeader('Range', `bytes=${start}-${end}`);
  xhr.setRequestHeader('If-Range', `${getDate}`);
  xhr.onload = function () {
    if (xhr.status === 206 && start + CHUNK_SIZE < contentLength) {
      let endLength = end + partLength;
      if (endLength > contentLength) {
        endLength = contentLength;
      }
      fileData.push(new Blob([xhr.response]));
      partDownload(downName, url, end + 1, endLength, contentLength);
    } else {
      fileData.push(new Blob([xhr.response]));
      const blob = new Blob(fileData, {
        type:
          'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
      });
      const link = document.createElement('a');
      link.href = window.URL.createObjectURL(blob);
      link.download = downName;
      link.click();
      window.URL.revokeObjectURL(link.href);
      message.success('下载成功!');
    }
  };
  xhr.onerror = function () {
    message.error('下载失败！');
  };
  xhr.send();
}
// 超大功能弹窗计算
export const superModelComputed = () => {
  const width = window.outerWidth;
  const height = window.outerHeight;
  return {
    width,
    height,
  };
};
export function getParam() {
  var hrefs = window.location.href.split('?'),
    querys = hrefs[hrefs.length - 1].split('&'),
    pair,
    params = {};

  for (var i = 0; i < querys.length; i++) {
    pair = querys[i].split('=');
    params[pair[0]] = pair[1];
  }
  return params;
}

export function checkAndReplace(a, b) {
  let found = false;
  for (let i = 0; i < a.length; i++) {
    if (a[i].row === b.row) {
      a[i].fixedVal = !a[i].fixedVal;
      found = true;
      break;
    }
  }
  if (!found) {
    a.push(b);
  }
}
// 添加节流函数
export function throttle(fn, wait = 1000) {
  let flag = false;
  let timer = null;
  return function () {
    let that = this;
    let args = arguments[0];
    if (flag) return;
    fn.call(that, args); // 先执行一次
    flag = true;
    timer = setTimeout(() => {
      flag = false;
    }, wait);
  };
}

export function returnTaskObj(selectedRowKeys, tableData) {
  const newList = [];
  selectedRowKeys.forEach((item, index) => {
    newList.push(item.split('_')[1]);
  });
  const newArr = Array.from(new Set(newList)); //作为键值
  //勾选的数据
  const targetList = [];
  tableData.forEach((item) => {
    selectedRowKeys.forEach((val) => {
      if (item.key == val) {
        targetList.push(item);
      }
    });
  });
  //bizTaskId相同分为一组
  const list2 = [];
  for (var i in targetList) {
    const list3 = [];
    for (var j in targetList) {
      if (
        targetList[i].bizTaskId == targetList[j].bizTaskId &&
        targetList[j].count != 1
      ) {
        targetList[j].count = 1;
        list3.push(targetList[j]);
      }
    }
    if (list3.length > 0) {
      list2.push(list3);
    }
  }
  const obj = {};
  newArr.forEach((item, index) => {
    list2.forEach((val, ind) => {
      val.forEach((v, i) => {
        if (item == v.bizTaskId) {
          obj[item] = val.map((item) => item.id);
        }
      });
    });
  });
  return obj;
}

export function getCodeName(options, text) {
  if (text) {
    let arr = text.split(',') || [];
    if (arr.length > 1) {
      let res = '';
      for (let i = 0; i < arr.length; i++) {
        res = res + (JSON.parse(options)?.[arr[i]] || arr[i]) + ',';
      }
      return res.substring(0, res.length - 1);
    } else {
      return JSON.parse(options)?.[text] || text;
    }
  } else {
    return '';
  }
}
export const titleRender = (
  columnCode,
  showStyle,
  text,
  showStyleInfo,
  options,
) => {
  if (showStyle == 'DATE' && !isNaN(Number(text))) {
    return dataFormat(text, showStyleInfo);
  } else if (showStyle == 'DICTCODE' && options) {
    return getCodeName(options, text);
  } else if (showStyle == 'PERCENT') {
    return `${Number(text).toFixed(2)}%`;
  } else if (columnCode == 'BIZ_STATUS') {
    return BL_STATE[text];
  } else if (columnCode == 'CREATE_TIME') {
    return dataFormat(text, 'YYYY年MM月DD日 HH:mm:ss');
  } else {
    return text;
  }
};
export const widthShow = (width, offsetWidth) => {
  let widths = width.toString().split(',');
  if (widths[1] == '%') {
    return offsetWidth * (Number(widths[0]) / 100);
  }
  return Number(widths[0]);
};
export const styleInfo = (col, offsetWidth) => {
  if (col.width) {
    let width = widthShow(col.width, offsetWidth) + 'px';
    if (col.alignStyle == 'MIDDLE') {
      return { width: width, paddingRight: '16px', paddingLeft: '16px' };
    } else if (col.alignStyle == 'RIGHT') {
      return { width: width, paddingLeft: '16px' };
    } else {
      return { width: width, paddingRight: '16px' };
    }
  } else {
    let minWidth = `${col.columnName.length * 20}px`;
    if (col.alignStyle == 'MIDDLE') {
      return { minWidth: minWidth, paddingRight: '16px', paddingLeft: '16px' };
    } else if (col.alignStyle == 'RIGHT') {
      return { minWidth: minWidth, paddingLeft: '16px' };
    } else {
      return { minWidth: minWidth, paddingRight: '16px' };
    }
  }
};
export const renderHtml = (col, text) => {
  if (text == '0E-8') {
    //后端返回的问题，单独改变这个
    text = '0.00';
  }
  //列表建模中设置了金额但是表单中随便输入的时候，如果是字符串则正常显示
  if (
    col.showStyle == 'MONEY' &&
    typeof text != 'undefined' &&
    text != '' &&
    !isNaN(Number(text))
  ) {
    //提取数字部分
    text = Number(text);
    if (col.showStyleInfo == 'SIXTH' || col.showStyleInfo == 'THUS_SIX') {
      text = text.toFixed(6);
    } else if (
      col.showStyleInfo == 'FOURTH' ||
      col.showStyleInfo == 'THUS_FOU'
    ) {
      text = text.toFixed(4);
    } else {
      text = text.toFixed(2);
    }
    if (
      col.showStyleInfo == 'THUS_SIX' ||
      col.showStyleInfo == 'THUS_FOU' ||
      col.showStyleInfo == 'THUS_SEC'
    ) {
      text = moneyFormateKilobit(text);
    }
    return (
      <p title={text}>
        {text}
      </p>
    );
  } else {
    let newText = titleRender(
      col.key,
      col.showStyle,
      text,
      col.showStyleInfo,
      col.options,
    );
    return (
      <p title={newText}>
        {newText}
      </p>
    );
  }
};
//百分比转乘小数
export function toPoint(percent){
  var str=percent.replace("%","");
  str= str/100;
  return str;
}

export function getBothTime(time, clock) {
  // 将时间戳转换为日期对象
  const date = time ? new Date(time) : new Date();
  // 将日期对象设置为当天的x点
  // date.setHours(clock, 0, 0, 0);
  if (clock === 24) {
    date.setHours(23, 59, 59);
  } else {
    date.setHours(clock, 0, 0, 0);
  }
  // 获取当天的0点时间戳，单位为毫秒
  return parseInt(date.getTime() / 1000);
}

export function formatSeconds(seconds) {
  if (seconds < 60) {
    return `${seconds}秒`;
  } else {
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = seconds % 60;
    if (remainingSeconds === 0) {
      return `${minutes}分`;
    } else {
      return `${minutes}分${remainingSeconds}秒`;
    }
  }
}


//通过menus获取titile
export function getMenuTitle(list,link,params){
  let laterLink = ''
  if (link.indexOf('/0/0')>-1) {
    laterLink = link.slice(0,-4)
  } else {
    laterLink = link
  }
  let name = '';
  if (list.length !== 0) {
    let info = _.find(list,{menuLink:laterLink});
    name = info?.name;
  }
  return name;
}
export function getButtons(menus, buttonCode,pathname,setExsitList) {
  // const antTableBody = document.getElementsByClassName('ant-table-body')[0];
  // if(antTableBody) {
  //   antTableBody.classList.remove('ant-table-body');
  //   antTableBody.style.overflow = 'hidden';
  // }
  // console.log('new menus',menus);
  if (menus.length != 0) {
    for (let index = 0; index < menus.length; index++) {
      const element = menus[index];
      let buttons = [];
      // let path = `/${history.location.pathname.split('/')[1]}`;
      if (pathname == element.path) {
        buttons = element;
      } else if (element.routes && element.routes.length != 0) {
        // const nextButtons = _.find(element.routes, function (o) {
        //   return o.menuName == '按钮管理'
        // })
        // if (nextButtons && (path == '/buttonLibrary' || path == '/buttonSolution')) { //按钮库需循环下一层
        //   console.log('nextButtons', nextButtons);
        //   return getButton([nextButtons], buttonCode)
        // }
        var isReturn = getButtons(element.routes, buttonCode,pathname,setExsitList);
        if (typeof isReturn === 'boolean') {
          return isReturn;
        } else {
          getButtons(element.routes, buttonCode,pathname,setExsitList);
        }
        // buttons = _.find(element.routes, {
        //   path: path
        // }) //找到当前路径所在obj
      }

      if (buttonCode) {
        if (buttons && buttons.length != 0) {
          if(Array.isArray(buttonCode)){
            var exsitList = []
            buttonCode.forEach(code => {
              var isExsit = _.find(buttons.buttonList, {
                buttonCode: code,
              });
              if(isExsit){
                exsitList.push(code)
              }
            });
            setExsitList(exsitList)
            return exsitList
          }else{
            const button = _.find(buttons.buttonList, {
              buttonCode: buttonCode,
            }); //找到当前按钮标识
            if (button) {
              return true;
            } else {
              return false;
            }
          }
        } else {
          continue;
        }
      }else{
        if (buttons) {
          //数据规则code
          return buttons.dataRuleCode ? buttons.dataRuleCode : '';

        } else {
          continue;
        }
      }
    }
  }
}
//获取url参数(这个用于文件预览,src有编码情况)
export function getOldUrlParameters(url) {
  var params = {},
  query = url.split('?')[1];
  if (query) {
    var queryArr = query.split('&');
    for (var i = 0; i < queryArr.length; i++) {
      var pair = queryArr[i].split('=');
      params[pair[0]] = decodeURIComponent(pair[1]);
    }
  }
  return params;
}
//获取url参数(这个用于pdf预览)
export function getUrlParameters(url) {
  var params = {},
  query = url.split('?')[1];
  if (query) {
    var queryArr = query.split('&');
    for (var i = 0; i < queryArr.length; i++) {
      var pair = queryArr[i].split('=');
      params[pair[0]] = pair[1];
    }
  }
  return params;
}
//是否是手机端
export function isMobileFn(){
  if (navigator.userAgent.match(/Mobi/i) ||
  navigator.userAgent.match(/Android/i) ||
  navigator.userAgent.match(/iPhone/i)) {
    // 当前设备是移动设备
    return true
  }
  return false
}
//获取url中的指定参数值
export function getUrlParamValue(url, paramName) {
  const searchParams = new URLSearchParams(url.split("?")[1]);
  return searchParams.get(paramName);
}
//html字符串渲染
export function renderHTML(htmlString) {
  const parser = new DOMParser();
  const doc = parser.parseFromString(htmlString, 'text/html');
  return doc.body.firstChild;
}

export function checkFlag(flag) {
  if (flag === undefined || flag === null || flag === 1) {
      return true;
  } else {
      return false;
  }
}

export function isJSON(str) {
  try {
      JSON.parse(str);
      return true;
  } catch (error) {
      return false;
  }
}

export function getMaxDepth(arr) {
  let maxDepth = 1;

  function calculateDepth(obj, depth) {
    if (obj.children) {
      depth++;
      maxDepth = Math.max(maxDepth, depth);
      obj.children.forEach(child => {
        calculateDepth(child, depth);
      });
    }
  }

  arr.forEach(obj => {
    calculateDepth(obj, 1);
  });

  return maxDepth;
}

//判断字符串的字符节点长度
export function strLength(str) {
  let len = 0
  for (let i = 0; i < str.length; i++) {
    let c = str.charAt(i)
    if (/^[\u0000-\u00ffA-Za-z1-9]+$/.test(c)) {
      len += 1
    } else {
      len += 2
    }
  }
  return len
}